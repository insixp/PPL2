(define make-ok
  (lambda (val)
    (cons "Ok" val)
  )
 )
 

(define make-error
  (lambda (msg)
    (cons "Failure" msg)
  )
 )


(define ok?
  (lambda (res)
    (if (result? res)
      (= (car res) "Ok")
      #f
    )
  )
)

(define error?
  (lambda (res)
    (if (result? res)
      (= (car res) "Failure")
      #f)
  )
 )

(define result?
  (lambda (res)
    (if (pair? res)
      (if (or (= (car res) "Ok") (= (car res) "Failure"))
      #t
      #f)
    #f
    )
  )
 )

(define result->val
  (lambda (res)
    (if (result? res)
      (cdr res)
      (make-error "Not Result"))
  )
)

(define bind 
  (lambda (f)
    (lambda (res)
      (if (ok? res)
        (f (result->val res))
        res)
    )
  )
)

(define make-dict
  (lambda ()
    (list)
  )
)

(define dict?
  (lambda (e)
    (if (empty? e)
      #t
      (if (pair? (car e))
        (dict? (cdr e))
        #f
      )
    )
  )
)

(define get
  (lambda (dict k)
    (if(dict? dict)
      (if (empty? dict)
        (make-ok "Key not found")
        (if (= (car (car dict)) k)
          (make-ok (cdr (car dict)))
          (get (cdr dict) k)
        )
      )
      (make-ok "Error: not a dictionary")
    )
  )
)

(define change-value 
  (lambda (dict k v)
    (if (dict? dict)
      (if (empty? dict)
        (make-ok "Key not found")
        (if (= (car (car dict)) k)
          (make-ok (cons '(k . v) (cdr dict)))
          (change-value (cdr dict) k v)
        )
      )
      (make-ok "Error: not a dictionary")
    )
  )
)

(define put
  (lambda (dict k v)
    (if (dict? dict)
      (if (empty? dict)
        (make-ok (cons (cons k v) (make-dict)))
        (if (= (car (car dict)) k)
          (make-ok (cons (cons k v) (cdr dict)))
          (put (cdr dict) k v)
        )        
      )
      (make-ok "Error: not a dictionary")
    )
  )
)

(define map-dict-apply 
  (lambda (dict f)
    (if (empty? dict) dict 
       (cons (cons (car(car dict)) (f (cdr(car dict)))) (map-dict-apply (cdr dict) f)))
  )
)

(define map-dict 
  (lambda (dict f)
    (make-ok (map-dict-apply dict f))
  )
)

(define filter-dict-apply 
  (lambda (dict pred)
    (if (empty? dict) dict 
      (if (pred (car(car dict)) (cdr(car dict))) (cons (car dict) (filter-dict-apply (cdr dict) pred)) (filter-dict-apply (cdr dict) pred)))
  )
)


(define filter-dict 
  (lambda (dict pred)
    (make-ok (filter-dict-apply dict pred))
  )
)

